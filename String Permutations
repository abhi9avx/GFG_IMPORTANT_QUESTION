String Permutations 
....................
Given a string S. The task is to find all permutations of a given string.

Example 1:

Input:
S = ABC
Output: ABC ACB BAC BCA CAB CBA 
Example 2:

Input:
S = ABSG
Output: ABGS ABSG AGBS AGSB ASBG ASGB
BAGS BASG BGAS BGSA BSAG BSGA GABS
GASB GBAS GBSA GSAB GSBA SABG SAGB
SBAG SBGA SGAB SGBA
 

Your Task:
This is a function problem. You only need to complete the function permutation that takes S as parameter and returns the list of permutations in lexicographically increasing order. The newline is automatically added by driver code.

Constraints:
1 ≤ size of string ≤ 5

Expected Time Complexity: O(N * N!), N = length of string.
Expected Auxiliary Space: O(1)

View Bookmarked Problems.................
...............
void find(int index,string s,vector<string>&ans)
    {
        if(index==s.size())
        {
            ans.push_back(s);
           return;
        }
        for(int i=index;i<s.size();i++)
        {
            swap(s[i],s[index]);
            find(index+1,s,ans);
            swap(s[i],s[index]);
        }
        
    }
    vector<string> permutation(string S)
    {
        //Your code here
        vector<string>ans;
        find(0,S,ans);
        sort(ans.begin(),ans.end());
        return ans;
    }
    
