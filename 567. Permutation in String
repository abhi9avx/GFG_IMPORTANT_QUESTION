567. Permutation in String

................................

Given two strings s1 and s2, return true if s2 contains a permutation of s1, or false otherwise.

In other words, return true if one of s1's permutations is the substring of s2.

 

Example 1:

Input: s1 = "ab", s2 = "eidbaooo"
Output: true
Explanation: s2 contains one permutation of s1 ("ba").
Example 2:

Input: s1 = "ab", s2 = "eidboaoo"
Output: false
 

Constraints:

1 <= s1.length, s2.length <= 104
s1 and s2 consist of lowercase English letters.

.........................

class Solution {
public:
    bool checkInclusion(string s1, string s2) {
        if(s1.size()>s2.size())
            return false;
        int l=s1.size();
        queue<char> q;
        map<char,int> mp;
        map<char,int> mp1;
        for(int i=0;i<l;i++)
            ++mp1[s1[i]];
       for(int i=0;i<l;i++){
           q.push(s2[i]);
           ++mp[s2[i]];
       }
        if(mp==mp1)
            return true;
        for(int i=l;i<s2.size();i++){
            char temp=q.front();
            q.pop();
            if(mp[temp]>1)
                mp[temp]--;
            else
            mp.erase(temp);
            q.push(s2[i]);
            ++mp[s2[i]];
           if(mp==mp1)
            return true;
        }
        return false;
    }
};

.......................
