N Digit numbers with digits in increasing order 

.........................
Given an integer N, print all the N digit numbers in increasing order, such that their digits are in strictly increasing order(from left to right).

Example 1:

Input:
N = 1
Output:
0 1 2 3 4 5 6 7 8 9
Explanation:
Single digit numbers are considered to be 
strictly increasing order.
Example 2:

Input:
N = 2
Output:
12 13 14 15 16 17 18 19 23....79 89
Explanation:
For N = 2, the correct sequence is
12 13 14 15 16 17 18 19 23 and so on 
up to 89.
Your Task:  
You don't need to read input or print anything. Your task is to complete the function increasingNumbers() which takes an integer N as an input parameter and return the list of numbers such that their digits are in strictly increasing order.

Expected Time Complexity: O(9N)
Expected Auxiliary Space: O(N)

Constraints:
1 <= N <= 9
....................
class Solution
{
public:
    void answer(vector<int>& a,int n,int i,int fill,int num){
       if(n==1){
           for(int j=0;j<10;++j){
               a.push_back(j);
           }
           return;
       }
       
       if(i>n){
           a.push_back(num);
           return ;
       }
       
       while(i<=n){
           int t = (9-(n-i));
           int j = fill;
           for(j=fill;j<=t;++j){
               answer(a,n,i+1,j+1,num*10+j);
           }
           i++;
           if(num<pow(fill,j)){
               return;
           }
       }
       
       return;
   }
    vector<int> increasingNumbers(int N)
    {
        // Write Your Code here
        vector<int> a;
       answer(a,N,1,1,0);
       return a;
    }
};

........................
