Maximum sum of increasing order elements from n arrays 

.......................

Given n arrays of size m each. Find maximum sum obtained by selecting a number from each array such that the element selected from the i-th array is more than the element selected from (i-1)-th array. If maximum sum cannot be obtained then return 0.

Example 1:

â€‹Input : arr[ ] = {{1,7,4,3}, {4,2,5,1}, {9,5,1,8}}
Output : 18
Explanation:
We can select 4 from the first array,
5 from second array and 9 from the third array.

â€‹Example 2:

Input : arr[ ] = {{9,8,7}, {6,5,4}, {3,2,1}} 
Output :  0

Your Task:
This is a function problem. The input is already taken care of by the driver code. You only need to complete the function maximumSum() that takes number of row N, a number of Column M, 2-d array (arr), and return the maximum sum if cannot be obtained then return 0. The driver code takes care of the printing.

Expected Time Complexity: O(N*M).
Expected Auxiliary Space: O(1).

 

Constraints:
1 ≤ N, M ≤ 500

......................

int maximumSum( int n,int m, vector<vector<int>> &a) {

    // Complete the function
    int temp=INT_MAX;
   int arr[n];
   int sum=0;
   for(int i=n-1;i>=0;i--){
       int max=0;
       for(int j=0;j<m;j++){
           if(a[i][j]>max && a[i][j]<temp) max=a[i][j];}
       temp=max;
       arr[i]=max;}
   sort(arr,arr+n);
   if(arr[0]==0) return 0;
   else return accumulate(arr,arr+n,sum);   
}
