Palindrome 

................................
Given an integer, check whether it is a palindrome or not.

Example 1:

Input: n = 55555
Output: Yes

Example 2:

Input: n = 123
Output: No
 

Your Task:
You don't need to read or print anything. Your task is to complete the function is_palindrome() which takes the number as input parameter and returns "Yes" if it is palindrome otherwise returns "No"(Without quotes).
 

Expected Time Complexity: O(x)
Expected Space Complexity: O(x) where x is number of digits in n.
 

Constraints:
1 <= n <= 1000

...............................
class Solution
{
	public:
		string is_palindrome(int n)
		{
		    // Code here.
		    vector<int> v;
            vector<int> v2;
            while(n!=0){
                int rem=n%10;
                v.push_back(rem);
                n=n/10;
            }
            int cnt=0;
            for(int i=0; i<v.size(); i++){
                v2.push_back(v[i]);
            }
            reverse(v.begin(), v.end());
       
            for(int i=0; i<v.size(); i++){
                if(v[i]==v2[i]){
                    cnt++;
                }
            }
       
            if(cnt==v.size()){
                return "Yes";
            }
       
            return "No";
        
		}
};

.....................................

