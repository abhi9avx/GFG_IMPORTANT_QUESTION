387. First Unique Character in a String

................

Given a string s, find the first non-repeating character in it and return its index. If it does not exist, return -1.

 

Example 1:

Input: s = "leetcode"
Output: 0
Example 2:

Input: s = "loveleetcode"
Output: 2
Example 3:

Input: s = "aabb"
Output: -1
 

Constraints:

1 <= s.length <= 105
s consists of only lowercase English letters.

..........................

class Solution {
public:
    int firstUniqChar(string s) {
        unordered_map <char, pair <int, int>> m ;
        int n = s.length();
        
        for(int i = 0; i < n; i++){
            m[s[i]].first++;
            m[s[i]].second = i;
        }
        
        int minIndex = INT_MAX;
        for(auto [c, p] : m){
            if(p.first == 1) {
                minIndex = min(minIndex, p.second);
            }
        }
        
        return minIndex == INT_MAX ? -1: minIndex;
    
    }
};

........................

