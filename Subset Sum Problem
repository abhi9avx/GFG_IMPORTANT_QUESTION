Subset Sum Problem 

........................................

https://practice.geeksforgeeks.org/problems/subset-sum-problem-1611555638/1/?category[]=Dynamic%20Programming&category[]=Dynamic%20Programming&page=4&query=category[]Dynamic%20Programmingpage4category[]Dynamic%20Programming#

.........................................

Given an array of non-negative integers, and a value sum, determine if there is a subset of the given set with sum equal to given sum. 


Example 1:

Input:
N = 6
arr[] = {3, 34, 4, 12, 5, 2}
sum = 9
Output: 1 
Explanation: Here there exists a subset with
sum = 9, 4+3+2 = 9.
Example 2:

Input:
N = 6
arr[] = {3, 34, 4, 12, 5, 2}
sum = 30
Output: 0 
Explanation: There is no subset with sum 30.

Your Task:  
You don't need to read input or print anything. Your task is to complete the function isSubsetSum() which takes the array arr[], its size N and an integer sum as input parameters and returns boolean value true if there exists a subset with given sum and false otherwise.
The driver code itself prints 1, if returned value is true and prints 0 if returned value is false.
 

Expected Time Complexity: O(sum*N)
Expected Auxiliary Space: O(sum*N)
 

Constraints:
1 <= N <= 100
1<= arr[i] <= 100
1<= sum <= 105

..............................

class Solution{   
public:
    bool isSubsetSum(int n, int set[], int sum){
        // code here 
        
        bool subset[n + 1][sum + 1];
        for (int i = 0; i <= n; i++)
            subset[i][0] = true;
        for (int i = 1; i <= sum; i++)
            subset[0][i] = false;   
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= sum; j++) {
                if (j < set[i - 1])
                 subset[i][j] = subset[i - 1][j];
                if (j >= set[i - 1])
                    subset[i][j] = subset[i - 1][j] || subset[i - 1][j - set[i - 1]];
            }
        }
        return subset[n][sum];
    }
};

......................................
